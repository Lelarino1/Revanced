name: Upload Release to Telegram

on:
  workflow_run:
    workflows: ["Build Modules"]
    types:
      - completed
    branches: [main]

jobs:
  upload:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Install jq
        run: sudo apt update && sudo apt install jq -y

      - name: Get latest release tag
        id: get_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Get release info
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG=${{ steps.get_tag.outputs.tag }}
          for i in {1..5}; do
            RELEASE_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG")
            ASSETS_COUNT=$(echo "$RELEASE_JSON" | jq '.assets | length')
            echo "Attempt $i: Assets count = $ASSETS_COUNT"
            if (( ASSETS_COUNT > 0 )); then
              break
            fi
            sleep 10
          done
          echo "$RELEASE_JSON" | jq -r '.body' > body.txt
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_JSON" > release.json

      - name: Send release notes to Telegram
        env:
          TG_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT: -1002692922050
        run: |
          BODY=$(cat body.txt)
          # Process the body for Telegram Markdown compatibility
          PROCESSED_BODY=$(echo "$BODY" | sed 's/^\* \*\*/â†ª \*\*/g; s/^\* `/â†ª \*\*/g; s/`/\*/g; s/^\* /\â†ª/g; s/\*\*/\*/g; s/###//g; s/^- /â†ª /g; /^==/d; s/_/\\_/g; s/\*/\\*/g; s/`/\\`/g')
          
          # Initialize variables
          NL=$'\n'
          APKS=""
          MODULES=""
          
          # Process assets using process substitution instead of pipe to avoid subshell
          while IFS='|' read -r name url; do
            if [[ $name = *.apk ]]; then
              if [[ -z "$APKS" ]]; then
                APKS="ðŸ“¦[${name}](${url})"
              else
                APKS="${APKS}${NL}ðŸ“¦[${name}](${url})"
              fi
            elif [[ $name = *.zip ]]; then
              if [[ -z "$MODULES" ]]; then
                MODULES="ðŸ“¦[${name}](${url})"
              else
                MODULES="${MODULES}${NL}ðŸ“¦[${name}](${url})"
              fi
            fi
          done < <(jq -r '.assets[] | .name + "|" + .browser_download_url' release.json)
          
          # Build message
          MSG="*New release published!*

          ${PROCESSED_BODY}

          *â–¼ Download Links:*"
          
          if [[ -n "$MODULES" ]]; then
            MSG="${MSG}${NL}Modules:${NL}${MODULES}"
          fi
          
          if [[ -n "$APKS" ]]; then
            MSG="${MSG}${NL}${NL}APKs:${NL}${APKS}"
          fi
          
          # Truncate if too long (Telegram message limit ~4096 chars)
          MSG=${MSG:0:4000}
          
          # Send to Telegram
          curl -X POST "https://api.telegram.org/bot$TG_TOKEN/sendMessage" \
            -d chat_id="$TG_CHAT" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview="true" \
            -d text="$MSG"
