name: Upload Release to Telegram

on:
  workflow_run:
    workflows: ["Build Modules"]
    types:
      - completed
    branches: [main]

jobs:
  upload:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Install jq and build dependencies
        run: |
          sudo apt update
          sudo apt install -y jq cmake gperf build-essential libssl-dev zlib1g-dev

      - name: Get latest release tag
        id: get_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir assets
          RELEASE_TAG=${{ steps.get_tag.outputs.tag }}
          ASSETS_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG")
          echo "$ASSETS_JSON" | jq -r '.assets[] | .browser_download_url' | while read url; do
            wget "$url" -P assets/
          done

      - name: Get release info
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG=${{ steps.get_tag.outputs.tag }}
          for i in {1..5}; do
            RELEASE_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG")
            ASSETS_COUNT=$(echo "$RELEASE_JSON" | jq '.assets | length')
            echo "Attempt $i: Assets count = $ASSETS_COUNT"
            if (( ASSETS_COUNT > 0 )); then
              break
            fi
            sleep 10
          done
          echo "$RELEASE_JSON" | jq -r '.body' > body.txt
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_JSON" > release.json

      - name: Build and run local Telegram Bot API server
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          cd telegram-bot-api
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          cd ../..
          # Run server in background with local mode (no persistent dir needed for short-lived workflow)
          telegram-bot-api --api-id ${{ secrets.TELEGRAM_API_ID }} --api-hash ${{ secrets.TELEGRAM_API_HASH }} --local --http-port 8081 &
          # Wait for server to start (adjust sleep if needed)
          sleep 10

      - name: Send release notes to Telegram (via local server)
        env:
          TG_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT: -1002692922050
        run: |
          BODY=$(cat body.txt)
          # Process the body for Telegram Markdown compatibility, plus escape special characters
          PROCESSED_BODY=$(echo "$BODY" | sed 's/^\* \*\*/â†ª \*\*/g; s/^\* `/â†ª \*\*/g; s/`/\*/g; s/^\* /\â†ª/g; s/\*\*/\*/g; s/###//g; s/^- /â†ª /g; /^==/d; s/_/\\_/g; s/\*/\\*/g; s/`/\\`/g')
          NL=$'\n'
          APKS=""
          MODULES=""
          jq -r '.assets[] | .name + "|" + .browser_download_url' release.json | while IFS='|' read -r name url; do
            if [[ $name = *.apk ]]; then
              APKS+="${NL}ðŸ“¦[${name}](${url})"
            elif [[ $name = *.zip ]]; then
              MODULES+="${NL}ðŸ“¦[${name}](${url})"
            fi
          done
          APKS=${APKS#"$NL"}
          MODULES=${MODULES#"$NL"}
          MSG="*New release published!*

          ${PROCESSED_BODY}

          *â–¼ Download Links:*
          Modules:
          ${MODULES}

          APKs:
          ${APKS}"
          # Truncate if too long
          MSG=${MSG:0:4000}
          curl -X POST "http://localhost:8081/bot$TG_TOKEN/sendMessage" \
            -d chat_id="$TG_CHAT" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview="true" \
            -d text="$MSG"

      - name: Upload assets to Telegram (via local server)
        env:
          TG_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT: -1002692922050
        run: |
          cd assets
          for file in *; do
            if [ -f "$file" ]; then
              ABS_PATH=$(realpath "$file")
              curl -F chat_id="$TG_CHAT" \
                -F document="file://$ABS_PATH" \
                "http://localhost:8081/bot$TG_TOKEN/sendDocument"
            fi
          done
